package ru.ethereal.project.java_bot.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.ethereal.project.java_bot.model.Joke;
import ru.ethereal.project.java_bot.service.JokeService;

import java.util.List;

@CrossOrigin(origins = "*", methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE})
@RestController
@RequestMapping("/api/jokes")
@RequiredArgsConstructor
public class JokeController {
    private final JokeService jokeService;

    @GetMapping
    public ResponseEntity<Page<Joke>> getAllJokes(Pageable pageable) {
        return ResponseEntity.ok(jokeService.getAllJokes(pageable));
    }

    @GetMapping("/simple")
    public List<Joke> getAllJokesSimple() {
        return jokeService.getAllJokesList();
    }

    @GetMapping("/search")
    public List<Joke> searchJokes(@RequestParam String query) {
        return jokeService.searchJokes(query);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Joke> getJokeById(@PathVariable Long id) {
        return jokeService.getJokeById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Joke> createJoke(@RequestBody Joke joke) {
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(jokeService.createJoke(joke));
    }

    @PutMapping("/{id}")
    public ResponseEntity<Joke> updateJoke(
            @PathVariable Long id,
            @RequestBody Joke jokeDetails) {
        try {
            return ResponseEntity.ok(jokeService.updateJoke(id, jokeDetails));
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteJoke(@PathVariable Long id) {
        jokeService.deleteJoke(id);
        return ResponseEntity.noContent().build();
    }
}
